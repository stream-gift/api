// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
    clerkId   String   @unique
    username  String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    profileImage  String?
    profileBanner String?
    profileColor  String?

    settings Settings?

    donations   Donation[]
    addresses   StreamerAddress[]
    balances    StreamerBalance[]
    withdrawals StreamerWithdrawal[]
}

model Settings {
    userId                String  @id @unique
    user                  User    @relation(fields: [userId], references: [id])
    id                    String  @default(cuid())
    playNotificationSound Boolean @default(true)
    animationType         String  @default("default")
}

enum Currency {
    SOL
}

enum DonationStatus {
    PENDING
    COMPLETED
    FAILED
}

model Donation {
    id        String         @id @default(cuid())
    amount    Int
    currency  Currency
    usd       Int
    message   String?
    name      String?
    status    DonationStatus @default(PENDING)
    createdAt DateTime       @default(now())
    userId    String
    user      User           @relation(fields: [userId], references: [id])
    addressId String
    address   Address        @relation(fields: [addressId], references: [id])
}

model Address {
    id          String     @id @default(cuid())
    address     String     @unique
    currency    Currency
    isLocked    Boolean    @default(false)
    lockedUntil DateTime?
    donations   Donation[]
}

model StreamerAddress {
    id        String   @id @default(cuid())
    address   String
    currency  Currency
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
}

model StreamerBalance {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    balance   Float    @default(0)
    pending   Float    @default(0)
    currency  Currency
    updatedAt DateTime @updatedAt

    @@unique([userId, currency])
}

enum StreamerWithdrawalStatus {
    PENDING
    COMPLETED
    FAILED
}

model StreamerWithdrawal {
    id        String                   @id @default(cuid())
    amount    Float
    address   String
    currency  Currency
    status    StreamerWithdrawalStatus @default(PENDING)
    userId    String
    user      User                     @relation(fields: [userId], references: [id])
    createdAt DateTime                 @default(now())
    updatedAt DateTime                 @updatedAt
}
